layout: post
title: My Biggest Challenge
---

I recently came across the book, [Think Like a Programmer](https://www.nostarch.com/thinklikeaprogrammer), by Anton V. Spraul. It made me realize, that after _learning_ a language, the difficulty lies in solving problems.

I can accumulate knowledge relatively quickly, but with programming, the difference is not **knowing** concepts, but my using them to _build_ interconnected programs. And to build those programs, you have to consider how they interact, and how they can be most efficiently built. This is where problem solving comes in. 

Problem solving is tough, in every industry, in every era. But, in programming it seems to be more of a challenge because of the syntax. The syntax is not human language, but instead computer language, _aka code_. Essentially, this is the tough a big reason why programming is initially very challenging. If you don’t know the syntax well, how are you going to solve those complex problems that permit programs to run. 

What I’ve learned is that syntax can be researched rather easily. For example, a colleague at Bloc, introduced me to [http://devdocs.io/](http://devdocs.io/), a searchable syntax and concept database. But, of course there's not searchable database for those complex problems we as programmers are trying to solve. The key challenge in addition to not fully understanding the syntax, is the actual deconstruction of the problem. 

To deconstruct, I'm currently experimenting with 
* Pseudo-code for what functions should be doing
* White boarding the solution with colleagues
* Reading code that's been written with similar functionality
* Being very patient!

I know I'll get the hang of syntax, and problem solving one day, but until then, I'll persist with sheer will. One day, I'll get to elegant solutions, but for now, I'm grateful that I have the tools to get the solution. 
